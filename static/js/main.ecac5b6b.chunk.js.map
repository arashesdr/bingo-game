{"version":3,"sources":["utils.js","Bingo.jsx","index.js"],"names":["idioms","data","idiomsShffle","sort","Math","random","splice","shuffleArray","Bingo","useState","checked","12","stateBingo","setStateBingo","useWindowSize","width","height","isWon","rows","_","range","won","find","row","colIndex","every","col","checkRows","cols","rowIndex","checkColumns","diagonal1","diagonal2","Diagonals","className","Object","keys","map","index","onClick","handleClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAEMA,EACJ,CACA,mCACA,gBACA,8BACA,0BACA,yCACA,kCACA,oBACA,4BACA,uBACA,0CACA,uCACA,kCACA,mCACA,oCACA,0CACA,iCACA,+BACA,mBACA,yCACA,wBACA,uBACA,6BACA,uBACA,0B,OClBIC,EDwBsB,WAE1B,IAAIC,EAAeF,EAAOG,MAAK,kBAAMC,KAAKC,SAAW,MAGrD,OAFAH,EAAaI,OAAO,GAAI,EANP,gCAQV,eAAIJ,GC7BAK,GAmGEC,EAjGD,WAEb,MAAoCC,mBAAS,CAE5CC,QAAS,CAAEC,IAAI,KAFhB,mBAAOC,EAAP,KAAmBC,EAAnB,KAMA,EAA0BC,MAAlBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OA6DTC,EAAQ,SAACP,GACd,OAhDiB,SAACA,GAClB,IAAMQ,EAAOC,IAAEC,MAAM,EAAG,GACpBC,GAAM,EASV,OAPAF,IAAED,GAAMI,MAAK,SAACC,GACb,IAAMC,EAAWL,IAAEC,MAAY,EAANG,EAAe,EAANA,EAAU,GAG5C,OAFIJ,IAAEK,GAAUC,OAAM,SAACC,GAAD,OAAShB,EAAQgB,QAAOL,GAAM,GAE7CA,KAGDA,EAqCAM,CAAUjB,IAjCG,SAACA,GACrB,IAAMkB,EAAOT,IAAEC,MAAM,EAAG,GACpBC,GAAM,EAQV,OANAF,IAAES,GAAMN,MAAK,SAACI,GACb,IAAMG,EAAWV,IAAEC,MAAMM,EAAKA,EAAM,EAAI,GAAI,GAG5C,OAFIP,IAAEU,GAAUJ,OAAM,SAACC,GAAD,OAAShB,EAAQgB,QAAOL,GAAM,GAE7CA,KAEDA,EAuBsBS,CAAapB,IAnBzB,SAACA,GAClB,IAAIW,GAAM,EAEJU,EAAYZ,IAAEC,MAAM,EAAG,GAAI,GACjC,GAAID,IAAEY,GAAWN,OAAM,SAACC,GAAD,OAAShB,EAAQgB,MAEvC,OADAL,GAAM,GACC,EAER,IAAMW,EAAYb,IAAEC,MAAM,EAAG,GAAI,GACjC,OAAID,IAAEa,GAAWP,OAAM,SAACC,GAAD,OAAShB,EAAQgB,OACvCL,GAAM,GACC,GAGDA,EAK+CY,CAAUvB,IAGjE,OACC,gCACC,qBAAKwB,UAAU,UAAf,SACEC,OAAOC,KAAKnC,GAAMoC,KAAI,SAACC,GAAD,OACtB,qBAECJ,UAAS,UAAe,OAAVI,EAAiB,eAAiB,aAAvC,YACR1B,EAAWF,QAAQ4B,IAAoB,OAAVA,EAAiB,UAAY,KADlD,KAKTC,QAAmB,OAAVD,EAAiB,KAAO,kBAzElB,SAACA,GACpB,IAAM5B,EAAO,2BACTE,EAAWF,SADF,kBAEX4B,GAAS1B,EAAWF,QAAQ4B,KAGxBjB,EAAMJ,EAAMP,GAClBG,EAAc,2BAAKD,GAAN,IAAkBF,UAASW,SAkEGmB,CAAYF,IAPpD,SASErC,EAAKqC,IAJDA,QAQR,8BACE1B,EAAWS,IAAM,cAAC,IAAD,CAAUN,MAAOA,EAAOC,OAAQA,IAAa,WClGnEyB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ecac5b6b.chunk.js","sourcesContent":["//This JS return a shuffle array for showing in a Bingo table\r\n\r\nconst idioms =\r\n  [\r\n  \"(Child noises in the background)\",\r\n  \"Hello, hello?\",\r\n  \"I need to jump another call\",\r\n  \"can everyone go on mute\",\r\n  \"Could you please get closer to the mic\",\r\n  \"(Loaud painful echo / feedback)\",\r\n  \"Next slide please\",\r\n  \"Can we take this offline?\",\r\n  \"is ____ on the call?\",\r\n  \"Could you share this slides afterwards?\",\r\n  \"Can somebody grant presenter rights?\",\r\n  \"Can you email that to everyone?\",\r\n  \"Sorry, I had problems loging in?\",\r\n  \"(Animal noises in the background)\",\r\n  \"Sorry, I didn't found the conference ID\",\r\n  \"I was having connection issues\",\r\n  \"I'll have to get back to you\",\r\n  \"Who just joined?\",\r\n  \"Sorry, something ____ with my calender\",\r\n  \"Do you see my screen?\",\r\n  \"Let's wait for ____!\",\r\n  \"You will send the minutes?\",\r\n  \"Sorry, I was on mute\",\r\n  \"Can you repeat please?\",\r\n];\r\n\r\nconst centerCard = \"CONF call ðŸ˜· BINGO\";\r\n\r\n//Change array order, add center card and return an object for showing in table\r\nexport const shuffleArray = () => {\r\n \r\n  let idiomsShffle = idioms.sort(() => Math.random() - 0.5);\r\n  idiomsShffle.splice(12, 0, centerCard);\r\n\r\n  return {...idiomsShffle};\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nimport _ from 'lodash';\r\nimport Confetti from 'react-confetti';\r\nimport useWindowSize from 'react-use/lib/useWindowSize';\r\n\r\nimport { shuffleArray } from './utils';\r\n\r\n//return a shuffle array for showing in the Bingo table\r\nconst data = shuffleArray();\r\n\r\nconst Bingo = () => {\r\n\t//State for getting and setting cards status\r\n\tconst [stateBingo, setStateBingo] = useState({\r\n\t\t//Set checked status for middle card\r\n\t\tchecked: { 12: true },\r\n\t});\r\n\r\n\t//Used for Confetti component\r\n\tconst { width, height } = useWindowSize();\r\n\r\n\t//Cards click event for checking or unchecking\r\n\tconst handleClick = (index) => {\r\n\t\tconst checked = {\r\n\t\t\t...stateBingo.checked,\r\n\t\t\t[index]: !stateBingo.checked[index],\r\n\t\t};\r\n\r\n\t\tconst won = isWon(checked);\r\n\t\tsetStateBingo({ ...stateBingo, checked, won });\r\n\t};\r\n\r\n\t//Check rows for finding winner\r\n\tconst checkRows = (checked) => {\r\n\t\tconst rows = _.range(0, 5);\r\n\t\tlet won = false;\r\n\r\n\t\t_(rows).find((row) => {\r\n\t\t\tconst colIndex = _.range(row * 5, row * 5 + 5);\r\n\t\t\tif (_(colIndex).every((col) => checked[col])) won = true;\r\n\r\n\t\t\treturn won;\r\n\t\t});\r\n\r\n\t\treturn won;\r\n\t};\r\n\r\n\t//Check columns for finding winner\r\n\tconst checkColumns = (checked) => {\r\n\t\tconst cols = _.range(0, 5);\r\n\t\tlet won = false;\r\n\r\n\t\t_(cols).find((col) => {\r\n\t\t\tconst rowIndex = _.range(col, col + 1 + 20, 5);\r\n\t\t\tif (_(rowIndex).every((col) => checked[col])) won = true;\r\n\r\n\t\t\treturn won;\r\n\t\t});\r\n\t\treturn won;\r\n\t};\r\n\r\n\t//Check diagonals for finding winner\r\n\tconst Diagonals = (checked) => {\r\n\t\tlet won = false;\r\n\r\n\t\tconst diagonal1 = _.range(0, 25, 6);\r\n\t\tif (_(diagonal1).every((col) => checked[col])) {\r\n\t\t\twon = true;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tconst diagonal2 = _.range(4, 21, 4);\r\n\t\tif (_(diagonal2).every((col) => checked[col])) {\r\n\t\t\twon = true;\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn won;\r\n\t};\r\n\r\n\t//Check rows or columns or diagonals for finding winner\r\n\tconst isWon = (checked) => {\r\n\t\treturn checkRows(checked) || checkColumns(checked) || Diagonals(checked);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className=\"wrapper\">\r\n\t\t\t\t{Object.keys(data).map((index) => (\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\t// Set the class name for middle catd and other cards(checked/ unchecked)\r\n\t\t\t\t\t\tclassName={`${index === '12' ? 'center-bingo' : 'bingo-cell'} ${\r\n\t\t\t\t\t\t\tstateBingo.checked[index] && index !== '12' ? 'checked' : null\r\n\t\t\t\t\t\t} `}\r\n\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t//Remove onClick event for middle card and assign the event for other cards\r\n\t\t\t\t\t\tonClick={index === '12' ? null : () => handleClick(index)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{data[index]}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t{stateBingo.won ? <Confetti width={width} height={height} /> : null}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Bingo;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Bingo from \"./Bingo\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Bingo />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}